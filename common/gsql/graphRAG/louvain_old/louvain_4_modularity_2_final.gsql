USE GRAPH {graph_name}
DROP QUERY {query_name}
CREATE OR REPLACE DISTRIBUTED QUERY graphRAG_louvain_4b(
) FOR GRAPH {graph_name} SYNTAX v1 {{
  SumAccum<DOUBLE> @@sum_weight; // the sum of the weights of all the links in the network
  MapAccum<STRING, SumAccum<DOUBLE>> @@community_total_weight_map; // community ID C -> the sum of the weights of the links incident to nodes in C
  MapAccum<STRING, SumAccum<DOUBLE>> @@community_in_weight_map; // community ID -> the sum of the weights of the links inside the community
  SumAccum<DOUBLE> @@modularity;
  MapAccum<STRING, SumAccum<INT>> @@Community_sizes;
  MapAccum<INT, SumAccum<INT>> @@count_of_sizes;
  AvgAccum @@avg_community_size;

  DOUBLE wt = 1.0;
  All_Nodes = {{{entity_vertex_name}.*}};
  Nodes =
    SELECT s
    FROM   All_Nodes:s -({relation_edge_name}:e)- :t
    ACCUM  IF s.{community_id_attribute_name} == t.{community_id_attribute_name} THEN
             @@community_in_weight_map += (s.{community_id_attribute_name} -> wt)
           END,
           @@community_total_weight_map += (s.{community_id_attribute_name} -> wt),
           @@sum_weight += wt
  ;
  @@modularity = 0;
  FOREACH (community, total_weight) IN @@community_total_weight_map DO
    DOUBLE in_weight = 0;
    IF @@community_in_weight_map.containsKey(community) THEN
      in_weight = @@community_in_weight_map.get(community);
    END;
    @@modularity += in_weight / @@sum_weight - pow(total_weight / @@sum_weight, 2);
  END;
  
  _tmp = 
    SELECT s
    FROM All_Nodes:s
    POST-ACCUM
      @@Community_sizes += (s.{community_id_attribute_name} -> 1);
  
  FOREACH (comm, cnt) IN @@Community_sizes DO
    @@count_of_sizes += (cnt -> 1);
    @@avg_community_size += cnt;
  END;
  
  // PRINT @@modularity, @@community_in_weight_map, @@community_total_weight_map, @@sum_weight;
  PRINT @@modularity AS modularity;
  PRINT @@community_total_weight_map.size() AS community_number;
  PRINT @@count_of_sizes AS num_communities_by_size;
  PRINT @@avg_community_size AS avg_community_size;
  
  @@community_in_weight_map.clear();
  @@community_total_weight_map.clear();
}}
