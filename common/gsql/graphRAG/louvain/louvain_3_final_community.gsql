USE GRAPH {graph_name}
DROP QUERY {query_name}
CREATE OR REPLACE DISTRIBUTED QUERY graphRAG_louvain_3(
  UINT top_layer = 2
) FOR GRAPH {graph_name} SYNTAX v1 {{
  MinAccum<STRING> @{community_id_attribute_name}; // the community ID of the node
  INT layer = top_layer;

  // Initialization
  LOG(TRUE, "Query started!");
  All_Nodes = {{{entity_vertex_name}.*}};

  // Top layer
  Nodes =
    SELECT t
    FROM   All_Nodes:s -(reverse_{belongs_to_edge_name}:e)- :t
    WHERE  layer IN e.layer_set
    ACCUM  t.@{community_id_attribute_name} = to_string(s.id)
  ;
  LOG(TRUE, layer, Nodes.size());

  // Other layers
  WHILE Nodes.size() > 0 AND layer > 0 DO
    layer = layer - 1;
    Nodes =
      SELECT t
      FROM   Nodes:s -(reverse_{belongs_to_edge_name}:e)- :t
      WHERE  layer IN e.layer_set
      ACCUM  t.@{community_id_attribute_name} = s.@{community_id_attribute_name}
    ;
    LOG(TRUE, layer, Nodes.size());
  END;

  // Write to the file
  Nodes =
    SELECT s
    FROM   Nodes:s
    POST-ACCUM
           //f.println(s.uniq_id, s.@{community_id_attribute_name})
           s.{community_id_attribute_name} = s.@{community_id_attribute_name}
           
  ; 
  LOG(TRUE, "Query finished!");
}}
