CREATE OR REPLACE DISTRIBUTED QUERY GraphRAG_Community_Vector_Search(LIST<FLOAT> query_vector, INT community_level=2, INT top_k = 3, BOOL with_chunk = true, BOOL verbose = false) { 
  MapAccum<Vertex, SetAccum<String>> @@result_set;
  MapAccum<STRING, SetAccum<Vertex>> @@verbose_info;
  SetAccum<STRING> @context;
  SetAccum<Vertex> @children;
  SetAccum<Vertex> @@start_set;
  comms = {Community.*};
  
  filtered_comms = SELECT c FROM comms:c WHERE c.iteration == community_level and length(c.description) > 0;
  selected_comms = vectorSearch({Community.embedding}, query_vector, top_k, {candidate_set: filtered_comms});

  IF with_chunk THEN
      FOREACH i IN RANGE[2, community_level] DO
          selected_comms = SELECT c FROM selected_comms:s -(<HAS_PARENT)- Community:c
              ACCUM s.@children += c
              POST-ACCUM @@verbose_info += ( s.id -> s.@children);
      END;
      related_chunks = SELECT c FROM Content:c -(<HAS_CONTENT)- DocumentChunk:d -(CONTAINS_ENTITY>)- Entity:v -(RESOLVES_TO>)- ResolvedEntity:r -(IN_COMMUNITY>)- selected_comms:m
          ACCUM m.@context += c.text, m.@children += d
          POST-ACCUM @@verbose_info += (m.id -> m.@children);
  END;

  selected_comms = SELECT c FROM selected_comms:c WHERE c.type == "Community"
      ACCUM c.@context += c.description, @@start_set += c POST-ACCUM(c) @@result_set += (c -> c.@context);

  @@verbose_info += ("start" -> @@start_set);

  PRINT @@result_set as selected_comms;

  IF verbose THEN
      PRINT @@verbose_info as verbose;
  END;
}
