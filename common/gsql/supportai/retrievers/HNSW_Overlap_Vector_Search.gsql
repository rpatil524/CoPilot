CREATE OR REPLACE DISTRIBUTED QUERY HNSW_Overlap_Vector_Search(Set<STRING> v_types,
  LIST<FLOAT> query_vector, UINT top_k=3, UINT num_hops=5, UINT num_seen_min=1, BOOL verbose = False) {
  TYPEDEF tuple<Vertex v, Float score> Similarity_Results;
  HeapAccum<Similarity_Results>(top_k, score DESC) @@topk_set;
  SetAccum<VERTEX> @@start_set;
  SetAccum<VERTEX> @@tmp_start_set;
  SetAccum<EDGE> @@edges;
  SumAccum<INT> @num_times_seen;
  MapAccum<Vertex, SetAccum<String>> @@result_set;
  MapAccum<STRING, SetAccum<Vertex>> @@verbose_info;
  SetAccum<VERTEX<DocumentChunk>> @@to_retrieve_content;
  SetAccum<STRING> @context;
  SetAccum<VERTEX> @parents;
  SetAccum<EDGE> @paths;
  INT inc_top_k = top_k * 2;

  FOREACH v_type IN v_types DO
    vset = {v_type.*};
    result = SELECT v FROM vset:v POST-ACCUM @@topk_set += Similarity_Results(v, 1 - gds.vector.distance(query_vector, v.embedding, "COSINE"));
  END;

  WHILE True LIMIT top_k DO
    @@start_set += @@topk_set.pop().v;
  END;

  start = {@@start_set};

  @@verbose_info += ("start" -> @@start_set);
  
  start = SELECT s FROM start:s ACCUM s.@parents += s POST-ACCUM s.@num_times_seen = num_seen_min, @@tmp_start_set += s;
  
  FOREACH i IN RANGE[0, num_hops-1] DO
    start = SELECT t FROM start:s -((RELATIONSHIP>|
                                     CONTAINS_ENTITY>|
                                     IS_AFTER>|
                                     <reverse_CONTAINS_ENTITY|
                                     IS_HEAD_OF>|
                                     HAS_TAIL>):e)- :t
            WHERE t NOT IN s.@parents
            ACCUM t.@parents += s, t.@paths += s.@paths, t.@paths += e
            POST-ACCUM t.@num_times_seen += 1, @@tmp_start_set += t;

    IF start.size() == 0 THEN
      BREAK;
    END;
  END;
  
  start = {@@tmp_start_set};
  @@tmp_start_set.clear();

  res = SELECT s FROM start:s WHERE s.@num_times_seen >= num_seen_min AND s.type != "Document"
        ACCUM
          IF s.type == "Relationship" THEN
            s.@context += s.definition
          ELSE IF s.type == "Entity" THEN
            STRING tmp_dsc = s.definition,
            FOREACH dsc IN s.description DO
              tmp_dsc = tmp_dsc + dsc +";"
            END,
            s.@context += tmp_dsc
          ELSE IF s.type == "DocumentChunk" THEN
            @@to_retrieve_content += s
          END
        POST-ACCUM
          @@tmp_start_set += s, @@edges += s.@paths,
          FOREACH v IN s.@parents DO
            IF v IN @@start_set THEN
              @@result_set += (v -> s.@context)
            END
          END;

  @@verbose_info += ("selected" -> @@tmp_start_set);

  doc_chunks = {@@to_retrieve_content};

  res = SELECT t FROM doc_chunks:s -(HAS_CONTENT>)- Content:t
        ACCUM s.@context += t.text
        POST-ACCUM
          FOREACH v IN s.@parents DO
            IF v IN @@start_set THEN
              @@result_set += (v -> s.@context)
            END
          END;

  PRINT @@result_set as final_retrieval;

  IF verbose THEN
      PRINT @@verbose_info as verbose;
  END;
}
