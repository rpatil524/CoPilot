CREATE OR REPLACE DISTRIBUTED QUERY HNSW_Chunk_Sibling_Vector_Search(STRING v_type,
  LIST<FLOAT> query_vector, UINT top_k=5, UINT lookback=3, INT lookahead=3) { 
  TYPEDEF tuple<Vertex v, Float score> Similarity_Results;
  HeapAccum<Similarity_Results>(top_k, score DESC) @@topk_set;
  MapAccum<VERTEX, INT> @distances;
  SumAccum<STRING> @content;
  MapAccum<VERTEX, MapAccum<VERTEX, MapAccum<STRING, STRING>>> @@final_retrieval;
  OrAccum @touched;
  SetAccum<VERTEX> @@start_set;
  
  all_chunks = {v_type.*};
  result = SELECT v FROM all_chunks:v POST-ACCUM @@topk_set += Similarity_Results(v, 1 - gds.vector.distance(query_vector, v.embedding, "COSINE"));

  FOREACH item IN @@topk_set DO
    @@start_set += item.v;
  END;

  seeds = {@@start_set};
  start = SELECT s FROM seeds:s ACCUM s.@distances += (s -> 0), s.@touched += TRUE;
  FOREACH i IN RANGE[1, lookback] DO
    start = SELECT tgt FROM start:s -(IS_AFTER)-> :tgt
          ACCUM 
            tgt.@touched += TRUE,
            FOREACH (key, val) IN s.@distances DO
              tgt.@distances += (key -> -1*i)
            END;
  END;
  
  start = seeds;
  FOREACH i IN RANGE[1, lookahead] DO
    start = SELECT tgt FROM start:s -(reverse_IS_AFTER)-> :tgt
            ACCUM
              tgt.@touched += TRUE,
              FOREACH (key, val) IN s.@distances DO
                tgt.@distances += (key -> i)
              END;
  END;
  
  res = SELECT s FROM all_chunks:s -(HAS_CONTENT)- Content:t WHERE s.@touched == TRUE
        ACCUM s.@content += t.text;
  
  res = SELECT s FROM all_chunks:s WHERE s.@touched == TRUE
        POST-ACCUM
          FOREACH (key, val) IN s.@distances DO
            @@final_retrieval += (key -> (s -> ("distance" -> to_string(val)))),
            @@final_retrieval += (key -> (s -> ("content" -> s.@content)))
          END;
  
  PRINT @@final_retrieval;
  
}
